namespace carbon::test;

import "mcrouter/lib/carbon/test/a/A.idl"
import "mcrouter/lib/network/Common.idl"

include "mcrouter/lib/carbon/test/TestUserType.h"

request TestRequest with 1: SimpleStruct as Base {
  id: 3;
  name: "test";
  reply: TestReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: test2::util::SimpleEnum testEnum;
  3: bool testBool;
  4: char testChar;
  5: int8_t testInt8;
  6: int16_t testInt16;
  7: int32_t testInt32;
  8: int64_t testInt64;
  9: uint8_t testUInt8;
  10: uint16_t testUInt16;
  11: uint32_t testUInt32;
  12: uint64_t testUInt64;
  13: float testFloat;
  14: double testDouble;
  15: std::string testShortString;
  16: std::string testLongString;
  17: folly::IOBuf testIobuf;
  18: SimpleStruct testStruct;
  19: std::vector<std::string> testList;
  20: folly::Optional<std::string> testOptionalString;
  21: folly::Optional<folly::IOBuf> testOptionalIobuf;
  22: std::vector<test2::util::SimpleEnum> testEnumVec;
  23: test2::util::SimpleUnion testUnion;
  24: std::vector<std::vector<uint64_t>> testNestedVec;
  25: std::unordered_map<std::string, std::string> testUMap;
  26: std::map<double, double> testMap;
  27: std::map<std::string, std::vector<uint16_t>> testComplexMap;
  28: std::unordered_set<std::string> testUSet;
  29: std::set<uint64_t> testSet;
  30: folly::Optional<bool> testOptionalBool;
  31: std::vector<folly::Optional<std::string>> testOptionalVec;
  32: std::vector<folly::IOBuf> testIOBufList;
  100: UserType testType;
};

reply TestReply {
  1: Result result;
  2: int32_t valInt32;
  3: int64_t valInt64;
};

request TestRequestStringKey {
  id: 4;
  name: "testStringKey";
  reply: TestReplyStringKey;

  1: carbon::Keys<std::string> key;
};

reply TestReplyStringKey {
  1: Result result;
};

struct TestOptionalBool {
  1: folly::Optional<bool> optionalBool;
};

union TestOptionalUnion {
  1: folly::Optional<int64_t> umember1;
  2: folly::Optional<bool> umember2;
  3: folly::Optional<std::string> umember3;
};

service {
  additional_requests: [AnotherRequest, carbon::test2::util::YetAnotherRequest];
  enable_shutdown: true;
};
